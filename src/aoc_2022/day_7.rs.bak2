use advent_of_code::Day;

trait Nameable {
    fn name(&self) -> &str;
}

// struct Tree {
//     children: Box<dyn Nameable>
// }

struct Tree<T: Nameable> {
    children: Vec<T>
}

impl<T: Nameable> Tree<T> {
    fn new() -> Tree<T> {
        Tree {
            children: Vec::new()
        }
    }

    fn get_child(&self, name: &str) -> Option<&T> {
        for (i, c) in self.children.iter().enumerate() {
            if c.name() == name {
                return Some(&self.children[i]);
            }
        }

        None
    }
}

enum Object<'a> {
    Folder(&'a str),
    File(&'a str, u32)
}

pub struct Day7 {}
impl Day for Day7 {
    fn day_number(&self) -> u8 {
        7
    }

    fn part1(&self, input: &String) -> String {
        let input = "$ cd /
$ ls
dir a
14848514 b.txt
8504156 c.dat
dir d
$ cd a
$ ls
dir e
29116 f
2557 g
62596 h.lst
$ cd e
$ ls
584 i
$ cd ..
$ cd ..
$ cd d
$ ls
4060174 j
8033020 d.log
5626152 d.ext
7214296 k";
        let mut pwd: Vec<&str> = Vec::new();
        let mut tree: Tree<Object> = Tree::new();

        for line in input.lines() {
            if line.starts_with('$') {
                if &line[2..3] == "cd" {
                    match &line[5..] {
                        "/" => pwd.clear(),
                        ".." => _ = pwd.pop(),
                        other => pwd.push(other)
                    }
                }
            } else {
                if line.starts_with('d') { // that means it starts with dir
                } else {}
            }
        }

        String::new()
    }

    fn part2(&self, input: &String) -> String {
        String::new()
    }
}
